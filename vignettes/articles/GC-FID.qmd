---
title: "Analysis of *Polistes* cuticular hydrocarbons with GC-FID"
editor_options: 
  chunk_output_type: console
bibliography: fid_article.bib
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(chromatographR)
library(rdryad)
library(vegan)
library(ggplot2)
```

### Introduction

While the basic workflow is similar for analyzing different types of chromatographic data with `chromatographR`, there are a few important differences when analyzing GC-FID data (or other 1-dimensional data). This vignette highlights some important considerations when using chromatographR to analyze GC-FID data (or other 2D chromatography data).

To demonstrate the use of `chromatographR` for the analysis GC-FID data, we will analyze a dataset on cuticular hydrocarbons (CHCs) composition in four species of paper wasps (*Polistes spp.*) collected by Dr. Andrew Legan [@legan2022; @legan2022a]. The dataset includes CHCs collected from *Polistes dominula* (european paper wasp), *Polistes exclamans* (common paper wasp), *P. fuscatus* (northern paper wasp), and *P. metricus* (metric paper wasp). As in other social insects, cuticular hydrocarbons serve as chemical cues mediating a number of social behaviors in paper wasps [@legan2021], including nestmate recognition [@gamboa1986; @gamboa1996; @bruschini2011], establishment of social hierarchies [@jandt2014] and mate choice [@reed1990].


::: {#fig-polistes layout-ncol=2 layout-nrow=2}

![*P. dominula* [@kranz2020]](images/pdom_pipe_c.jpg){height=300}

![*P. exclamans* (Â© Andrew Legan)](images/PEXC_multiple_adults_on_nest_c.png){height=300}

![*P. fuscatus* [@cook2022]](images/fuscatus.jpeg){width=300}

![*P. metricus* [@drabik-hamshare2022]](images/p_metricus_c.jpeg){height=300}

*Polistes* species includes in this study.
:::


```{r download_data}
# load chromatograms from Legan et al 2022
files <- rdryad::dryad_download("10.5061/dryad.wpzgmsbr8")[[1]]
chrom_paths <- grep("README|METADATA|ANNOTATED", files, invert = TRUE, 
                    value = TRUE)
dat <- read_chroms(chrom_paths, format_in = "shimadzu_fid")

# load metadata
path_to_metadata <- grep("METADATA", files, value = TRUE)
meta <- read.csv(path_to_metadata, sep = "\t")
```

In order to get a good alignment, it is helpful to remove the solvent peak. To accomplish this, we can use the `preprocess` function to remove the first four minutes of the chromatogram. We also reduce the time-axis resolution to .005 minutes since it drastically reduces computation time while seemingly having little effect on the accuracy of the integration results.

```{r preprocess_data}
dat.pr <- preprocess(dat, spec.smooth = FALSE, dim1 = seq(4, 59.9, .005), cl = 1)
```

We can then group the chromatograms by species for further analysis.

```{r obtain_species_idx}
species <- c(dominula = "DOMINULA", exclamans.= "EXCLAMANS", 
             fuscatus = "FUSCATUS", metricus = "METRICUS")

species_idx <- lapply(species, function(sp){
  which(names(dat.pr) %in% gsub(".txt", "",
                                meta[which(meta$POLISTES_SPECIES == sp),
                                     "SAMPLE_ID"]))
})
```

We can extract the peaks from the alkane ladder using the `get_peaks` function and plot the integrated peak areas. To eliminate small peaks that are not part of the alkane ladder, we use the `filter_peaks` function to remove features that do not have an amplitude of at least 10^4 response units.

```{r integrate_alkanes}
ladder <- grep("LADDER", names(dat.pr))
pks <- get_peaks(dat.pr[ladder], time.units = "s")
plot(pks, chrom_list = dat.pr[ladder])
pks_f <- filter_peaks(pks, min_height = 10000)
```

In this case, we also have integration results from 'Shimadzu LabSolutions', so we can check the integration results provided by `chromatographR` against the results from LabSolutions.

```{r load_SLS_alkanes}
path_to_annotated_alkanes <- grep("ANNOTATED", files[[1]], value = TRUE)
alkanes <- read.csv(path_to_annotated_alkanes, sep="\t")
```

```{r}
# check equality of retention times
# all.equal(alkanes$RT[-1],pks_f$ALKANE_LADDER$Intensity$rt)

par(mfrow=c(1,2))

plot(pks_f$ALKANE_LADDER$Intensity$area ~ alkanes$Area[-1], pch = 20,
     xlab = "Area (LabSolutions)", ylab = "Area (chromatographR)", 
     main = "Area")
m <- lm(pks_f$ALKANE_LADDER$Intensity$area ~ alkanes$Area[-1])
abline(m)
legend("bottomright", bty = "n", 
       legend = bquote(R^2 == .(format(summary(m)$adj.r.squared, digits = 4))))

plot(pks_f$ALKANE_LADDER$Intensity$height ~ alkanes$Height[-1], pch = 20,
     xlab = "Area (LabSolutions)", ylab = "Area (chromatographR)", 
     main = "Height")
m <- lm(pks_f$ALKANE_LADDER$Intensity$height ~ alkanes$Height[-1])
abline(m)
legend("bottomright", bty = "n", 
       legend = bquote(R^2 == .(format(summary(m)$adj.r.squared, digits = 4))))
```

Reassuringly, the peak areas and heights estimated by chromatographR are very similar to the results provided by LabSolutions.

### Alignment of chromatograms

We can align chromatograms by species using variable dynamic time warping. 

```{r single_species_alignments}
warp_dominula <- suppressWarnings(correct_rt(dat.pr[species_idx$dominula], 
                                            alg = "vpdtw", 
                                            what = "corrected.values", 
                                            plot_it = TRUE, verbose = TRUE, 
                                            penalty = 1, maxshift = 100))

warp_metricus <- suppressWarnings(correct_rt(dat.pr[species_idx$metricus], 
                                            alg = "vpdtw", 
                                            what = "corrected.values", 
                                            plot_it = FALSE, verbose = FALSE, 
                                            penalty = 2, maxshift = 100))

warp_exclamans <- suppressWarnings(correct_rt(dat.pr[species_idx$exclamans],
                                             alg = "vpdtw",
                                             what = "corrected.values", 
                                             plot_it = FALSE, verbose = FALSE, 
                                             penalty = 2, maxshift = 200))

warp_fuscatus <- suppressWarnings(correct_rt(dat.pr[species_idx$fuscatus],
                            alg = "vpdtw", what = "corrected.values",
                            plot_it = FALSE, verbose = FALSE, 
                            penalty = 2, maxshift = 200))
```

```{r multi_species_alignment}
warp_all <- suppressWarnings(correct_rt(dat.pr[-1], alg = "vpdtw",
                       what = "corrected.values", plot_it = FALSE,
                       verbose = FALSE, penalty = 2, maxshift = 200))
```

As a sanity check, we can compare the single species alignments for each species to the multi-species alignment of the corresponding chromatograms.

```{r plot_metricus_alignments}
par(mfrow=c(3,1))
plot_chroms(warp_all[grep("PMET",names(warp_all))],show_legend = FALSE)
legend("topright", expression(paste(italic("P. metricus"), 
                                    " (multi-species)")), bty = "n")

plot_chroms(warp_metricus, show_legend = FALSE)
legend("topright", expression(paste(italic("P. metricus"), 
                                    " (single-species)")), bty = "n")

plot_chroms(dat.pr[species_idx$metricus], show_legend = FALSE)
legend("topright", expression(paste(italic("P. metricus"), 
                                    " (raw)")), bty = "n")
```


```{r plot_fuscatus_alignments}
par(mfrow=c(3,1))
plot_chroms(warp_all[grep("PFUS",names(warp_all))],show_legend = FALSE)
legend("topright", expression(paste(italic("P. fuscatus"), " (multi-species)")),
       bty = "n")

plot_chroms(warp_fuscatus, show_legend = FALSE)
legend("topright", expression(paste(italic("P. fuscatus"), " (single-species)")),
       bty = "n")

plot_chroms(dat.pr[species_idx$fuscatus], show_legend = FALSE)
legend("topright", expression(paste(italic("P. fuscatus"), 
                                    " (raw)")), bty = "n")
```

```{r plot_dominula_alignments}
par(mfrow=c(3,1))
plot_chroms(warp_all[grep("PDOM", names(warp_all))],show_legend = FALSE)
legend("topright", expression(paste(italic("P. dominula"), " (multi-species)")), bty="n")

plot_chroms(warp_dominula, show_legend = FALSE)
legend("topright", expression(paste(italic("P. dominula"), " (single-species)")), bty="n")

plot_chroms(dat.pr[species_idx$dominula], show_legend = FALSE)
legend("topright", expression(paste(italic("P. dominula"), 
                                    " (raw)")), bty="n")
```

```{r plot_exclamans_alignments}
par(mfrow = c(3,1))
plot_chroms(warp_all[grep("PEXC", names(warp_all))],show_legend = FALSE)
legend("topright", expression(paste(italic("P. exclamans"), " (multi-species)")),
       bty = "n")

plot_chroms(warp_exclamans, show_legend = FALSE)
legend("topright", expression(paste(italic("P. exclamans"), " (single-species)")),
       bty = "n")

plot_chroms(dat.pr[species_idx$exclamans], show_legend = FALSE)
legend("topright", expression(paste(italic("P. exclamans"), 
                                    " (raw)")), bty = "n")
```

In general, the results are quite similar between multispecies and single species alignments.

### Integration and peaktable assembly

```{r assemble_peak_table}
pks <- get_peaks(warp_all)
pktab <- get_peaktable(pks)
pktab <- attach_metadata(pktab, metadata = meta, column = "SAMPLE_ID")
```

### Analysis of peaktable

```{r}
m <- vegan::adonis2(pktab$tab ~ POLISTES_SPECIES + STATE + SEX + LAT + LON,
               data = pktab$sample_meta, method = "manhattan",
               na.action = na.omit)
m
```

As one would expect, the permanova shows that species is the largest contributor to the variance in CHC profiles (R^2^ = `r round(m$R2[1], digits = 2)`), followed by state of origin (R^2^ = `r round(m$R2[2], digits = 2)`) and sex (R^2^ = `r round(m$R2[3], digits=2)`).

```{r modified_ggordiplot}
# ggordiplot function (modified from https://github.com/jfq3/ggordiplots/blob/master/R/gg_ordiplot.R) with added shape argument
gg_ordiplot <- function (ord, groups, shape = NULL, scaling = 1, choices = c(1, 2), 
                         kind = c("sd", "se", "ehull"), conf = NULL, 
                         show.groups = "all", ellipse = TRUE, 
                         label = FALSE, hull = FALSE, spiders = FALSE, 
                         pt.size = 3, plot = TRUE) {
  x <- y <- cntr.x <- cntr.y <- Group <- NULL
  groups <- as.factor(groups)
  if (show.groups[1] == "all") {
    show.groups <- as.vector(levels(groups))
  }
  df_ord <- vegan::scores(ord, display = "sites", scaling = scaling, 
                          choices = choices)
  axis.labels <- ggordiplots::ord_labels(ord)[choices]
  df_ord <- data.frame(x = df_ord[, 1], y = df_ord[, 2], Group = groups)
  if (!is.null(shape)){
    df_ord <- data.frame(df_ord, shape = shape)
  }
  df_mean.ord <- aggregate(df_ord[, 1:2], by = list(df_ord$Group), 
                           mean)
  colnames(df_mean.ord) <- c("Group", "x", "y")
  df_mean.ord <- df_mean.ord[df_mean.ord$Group %in% show.groups, 
  ]
  if (is.null(conf)) {
    rslt <- vegan::ordiellipse(ord, groups = groups, display = "sites", 
                               scaling = scaling, choices = choices, 
                               kind = kind, show.groups = show.groups,
                               draw = "none", label = label)
  } else {
    rslt <- vegan::ordiellipse(ord, groups = groups, display = "sites", 
                               scaling = scaling, choices = choices, 
                               kind = kind, show.groups = show.groups,
                               draw = "none", conf = conf, 
                               label = label)
  }
  df_ellipse <- data.frame()
  for (g in show.groups) {
    df_ellipse <- rbind(df_ellipse, 
                        cbind(as.data.frame(with(df_ord[df_ord$Group == g, ],
                      vegan:::veganCovEllipse(rslt[[g]]$cov, rslt[[g]]$center,
                                              rslt[[g]]$scale))), Group = g))
  }
  colnames(df_ellipse) <- c("x", "y", "Group")
  df_ellipse <- df_ellipse[, c(3, 1, 2)]
  rslt.hull <- vegan::ordihull(ord, groups = groups, scaling = scaling, 
                               choices = choices, show.groups = show.groups,
                               draw = "none")
  df_hull <- data.frame()
  df_temp <- data.frame()
  for (g in show.groups) {
    x <- rslt.hull[[g]][, 1]
    y <- rslt.hull[[g]][, 2]
    Group <- rep(g, length(x))
    df_temp <- data.frame(Group = Group, x = x, y = y)
    df_hull <- rbind(df_hull, df_temp)
  }
  df_spiders <- df_ord
  df_spiders$cntr.x <- NA
  df_spiders$cntr.y <- NA
  for (g in show.groups) {
    df_spiders[which(df_spiders$Group == g), 4:5] <- 
      df_mean.ord[which(df_mean.ord == g), 2:3]
  }
  df_spiders <- df_spiders[, c(3, 4, 5, 1, 2)]
  df_spiders <- df_spiders[order(df_spiders$Group), ]
  df_spiders <- df_spiders[df_spiders$Group %in% show.groups, 
  ]
  xlab <- axis.labels[1]
  ylab <- axis.labels[2]
  plt <- ggplot2::ggplot() + geom_point(data = df_ord, aes(x = x, 
                                                           y = y, 
                                                           color = Group, 
                                                           shape = shape), 
                                        size = pt.size) + 
    xlab(xlab) + 
    ylab(ylab)
  if (ellipse == TRUE) {
    plt <- plt + geom_path(data = df_ellipse, aes(x = x, 
                                                  y = y, color = Group),
                           show.legend = FALSE)
  }
  if (label == TRUE) {
    plt <- plt + geom_text(data = df_mean.ord, 
                           aes(x = x, y = y, label = Group, color = Group),
                           show.legend = FALSE)
  }
  if (hull == TRUE) {
    plt <- plt + geom_path(data = df_hull, 
                           aes(x = x, y = y, color = Group), 
                           show.legend = FALSE)
  }
  if (spiders == TRUE) {
    plt <- plt + geom_segment(data = df_spiders, 
                              aes(x = cntr.x, xend = x, y = cntr.y, yend = y,
                                  color = Group), show.legend = FALSE)
  }
  plt <- plt + coord_fixed(ratio = 1)
  if (plot) {
    print(plt)
  }
  invisible(list(df_ord = df_ord, df_mean.ord = df_mean.ord, 
                 df_ellipse = df_ellipse, df_hull = df_hull,
                 df_spiders = df_spiders, 
                 plot = plt))
}
```

```{r}
ord <- vegan::rda(pktab$tab, scale = TRUE)
pktab$sample_meta$SEX_SP <- interaction(pktab$sample_meta$SEX,
                                      pktab$sample_meta$POLISTES_SPECIES)

gg_ordiplot(ord, groups = pktab$sample_meta[,"POLISTES_SPECIES"],
            shape = pktab$sample_meta[,"SEX"], plot = FALSE)$plot +
  scale_shape_manual(values = c(19, 21), name = "Sex") +
  labs(colour = "Species")
```

Principal componenets analysis shows decent separation between species, with *P. dominula*, *P. fuscatus* and *P. dominula* separating along PC2 and *P. exclamans* separating from the other species along PC1.

We can get even better separation if we break down our data by sex, though there is considerable intraspecific variation.

```{r}
cond <- which(pktab$sample_meta$SEX == "M")
ord_m <- vegan::rda(pktab$tab[cond,], scale = TRUE)

gg_ordiplot(ord_m, groups = pktab$sample_meta[cond,"POLISTES_SPECIES"], 
            plot = FALSE)$plot + 
  ggtitle("Males") +
  theme_classic() +
  theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) +
  labs(colour = "Species")

cond <- which(pktab$sample_meta$SEX == "F")
ord_f <- vegan::rda(pktab$tab[cond,],scale=TRUE)

gg_ordiplot(ord_f, groups = pktab$sample_meta[cond,"POLISTES_SPECIES"],
                         plot = FALSE)$plot + 
  ggtitle("Females") + 
  theme_classic() +
  theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) +
  labs(colour = "Species")
```

### References

::: {#refs}
:::

### Session Information

```{r}
sessionInfo()
```
